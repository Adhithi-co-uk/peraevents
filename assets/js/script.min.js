(function() {
  "use strict"; // Start of use strict

  var mainNav = document.querySelector('#mainNav');

  if (mainNav) {

    var navbarCollapse = mainNav.querySelector('.navbar-collapse');
    
    if (navbarCollapse) {
      
      var collapse = new bootstrap.Collapse(navbarCollapse, {
        toggle: false
      });
      
      var navbarItems = navbarCollapse.querySelectorAll('a');
      
      // Closes responsive menu when a scroll trigger link is clicked
      for (var item of navbarItems) {
        item.addEventListener('click', function (event) {
          collapse.hide();
        });
      }
    }

    // Collapse Navbar
    var collapseNavbar = function() {

      var scrollTop = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;

      if (scrollTop > 100) {
        mainNav.classList.add("navbar-shrink");
      } else {
        mainNav.classList.remove("navbar-shrink");
      }
    };
    // Collapse now if page is not at top
    collapseNavbar();
    // Collapse the navbar when page is scrolled
    document.addEventListener("scroll", collapseNavbar);

    // Hide navbar when modals trigger
    var modals = document.querySelectorAll('.portfolio-modal');
      
    for (var modal of modals) {
      
      modal.addEventListener('shown.bs.modal', function (event) {
        mainNav.classList.add('d-none');
      });
        
      modal.addEventListener('hidden.bs.modal', function (event) {
        mainNav.classList.remove('d-none');
      });
    }
  }

})(); // End of use strict
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], function () {
      return factory(root);
    });
  } else if (typeof exports === 'object') {
    module.exports = factory(root);
  } else {
    root.ysCountDown = factory(root);
  }
})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {

  'use strict';

  //
  // Shared Methods
  //

  /**
   * Check if browser supports required methods.
   * @private
   * @return {Boolean} Returns true if all required methods are supported.
   */
  var supports = function () {
    return (
      'addEventListener' in window
    );
  };

  /**
  * Check `date` is a Date.
  * @private
  * @param {Object} date The date to check.
  * @returns {Boolean} Returns `true` if `date` is a Date, else `false`.
  */
  var isDate = function (date) {
    return date instanceof Date && !isNaN(date);
  };

  //
  // Plugin Constructor
  //

  /** 
   * Plugin Object
   * @param {Object} opts User settings
   * @constructor
   */
  var Plugin = function (fDate, cb) {

    //
    // Plugin Variables
    //

    var publicAPIs = {};
    var finalDate = null;
    var callback = null;
    var interval = null;
    var remaining = null;
    var finished = false;

    //
    // Plugin Methods
    //

    /**
     * Initialize Plugin.
     * @public
     * @param {Object} options User settings
     */
    publicAPIs.init = function (fDate, cb) {

      // Feature test
      if (!supports()) throw 'ysCountDown: This browser does not support the required JavaScript methods.'

      // Destroy any existing initializations
      publicAPIs.destroy();

      // Set finalDate
      finalDate = (typeof fDate === 'string') ? new Date(fDate) : fDate;

      // Check if a valid date
      if (!isDate(finalDate)) throw new TypeError('ysCountDown: Please enter a valid date.');

      // Check if a valid callback
      if (typeof cb !== 'function') throw new TypeError('ysCountDown: Please enter a callback function.');

      callback = cb;

      // Start the countdown
      start();

    };

    /**
     * Destroy the current initialization.
     * @public
     */
    publicAPIs.destroy = function () {

      // Reset variables
      finalDate = null;
      callback = null;
      stop();
      remaining = null;
      finished = false;

    };

    /**
     * Calculate the remaining time.
     * @private
     */
    var calculate = function () {

      // Get current date
      var now = new Date();

      // Calculate totalSecsLeft
      var totalSecsLeft = Math.ceil((finalDate.getTime() - now.getTime()) / 1000);

      // Check if the countdown has elapsed
      if (totalSecsLeft <= 0) {
        finished = true;
        stop();
      }

      // Calculate the remaining time
      remaining = {
        seconds: totalSecsLeft % 60,
        minutes: Math.floor(totalSecsLeft / 60) % 60,
        hours: Math.floor(totalSecsLeft / 60 / 60) % 24,
        days: Math.floor(totalSecsLeft / 60 / 60 / 24) % 7,
        daysToWeek: Math.floor(totalSecsLeft / 60 / 60 / 24) % 7,
        daysToMonth: Math.floor(totalSecsLeft / 60 / 60 / 24 % 30.4368),
        weeks: Math.floor(totalSecsLeft / 60 / 60 / 24 / 7),
        weeksToMonth: Math.floor(totalSecsLeft / 60 / 60 / 24 / 7) % 4,
        months: Math.floor(totalSecsLeft / 60 / 60 / 24 / 30.4368),
        monthsToYear: Math.floor(totalSecsLeft / 60 / 60 / 24 / 30.4368) % 12,
        years: Math.abs(finalDate.getFullYear() - now.getFullYear()),
        totalDays: Math.floor(totalSecsLeft / 60 / 60 / 24),
        totalHours: Math.floor(totalSecsLeft / 60 / 60),
        totalMinutes: Math.floor(totalSecsLeft / 60),
        totalSeconds: totalSecsLeft
      }

      // Run callback
      callback(remaining, finished);

    };

    /**
     * Starts the auto calculate.
     * @private
     */
    var start = function () {

      // if an interval already exists, disregard call
      if (interval) return;

      // create an interval
      interval = setInterval(function () {
        calculate();
      }, 100);

    };

    /**
     * Stops the auto calculate.
     * @private
     */
    var stop = function () {

      // if no interval exists, disregard call
      if (!interval) return;

      // clear the interval
      clearInterval(interval);
      interval = null;

    };

    //
    // Initialize plugin
    //

    publicAPIs.init(fDate, cb);

    //
    // Return the public APIs
    //

    return publicAPIs;

  };

  //
  // Return the Plugin
  //

  return Plugin;

});
var observer = new IntersectionObserver(entries=> {
            entries.forEach(entry=> {
                if (entry.isIntersecting) {
                    // Add the 'animate' class when the element is visible
                    entry.target.classList.add('animate');
                    // Stop observing to avoid unnecessary callbacks
                    observer.unobserve(entry.target);
                }
            });
        });


document.querySelectorAll('.appear-from-bottom').forEach(element=>{
    observer.observe(element);
})


function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
// Function to handle form submission
function submitForm() {
  // Prevent default form submission
  event.preventDefault();
  document.getElementById("overlay").style.display = "flex";

  //change button label to submitting
  document.getElementById("submit-button").innerHTML = "Submitting...";

  // Get the reCAPTCHA token
  grecaptcha.ready(function () {
    grecaptcha
      .execute("6Lc5Np8pAAAAAG-xz8gUqen584I0nWZVFfau2pjo", { action: "submit" })
      .then(function (token) {
        // Token received, include it in your form data
        var formData = new FormData(document.forms["registration-form"]);
        formData.append("g-recaptcha-response", token);
        // Add other form fields to formData if needed

        // Perform your form submission here using Ajax or other method
        // Example using Fetch API
        fetch("https://forms.adhithi.co.uk/", {
          method: "POST",
          body: formData,
        })
          .then((response) =>
            response.json().then((data) => {
              if (response.status == 200) {
                document.getElementById("overlay").style.display = "none";
                document.getElementById("alert").style.display = "block";
                document.getElementById("submit-button").disabled = true;
                //change button label to submitted
                document.getElementById("submit-button").innerHTML =
                  "Registered!";
                document
                  .getElementById("alert")
                  .classList.remove("alert-danger");
                document.getElementById("alert").classList.add("alert-success");
                document
                  .getElementById("reg-header")
                  .scrollIntoView({ behavior: "smooth" });
                const message = data.message || "Unknown error occurred";
                document.getElementById(
                  "alert"
                ).innerHTML = `<strong>Booking confirmed!</strong>`;
                sleep(3000).then(() => {
                  document.getElementById("alert").style.display = "none";
                });
              } else {
                throw new Error(
                  data.message || "Something went wrong. Please try again."
                );
              }
            })
          )
          .catch((error) => {
            document.getElementById("overlay").style.display = "none";
            document.getElementById("alert").style.display = "block";
            document.getElementById("alert").classList.remove("alert-success");
            document.getElementById("alert").classList.add("alert-danger");
            //change button label to submit
            document.getElementById("submit-button").innerHTML = "Submit";
            document.getElementById("alert").innerHTML =
              "<strong>Error!</strong> " + error.message;
            document
              .getElementById("reg-header")
              .scrollIntoView({ behavior: "smooth" });
            sleep(3000).then(() => {
              document.getElementById("alert").style.display = "none";
            });
          });
      });
  });
}

window.onload = function () {
  document.getElementById("submit-button").innerHTML = "Submit";
  document.getElementById("submit-button").disabled = false;
  document.getElementById("submit-button").classList.remove("disabled");
};

 document.getElementById("sponsor_amount_div").style.display = "none";

document.getElementById("ticket").addEventListener("change", function (e) {
  if (e.target.value === "Sponsor Ticket") {
    document.getElementById("sponsor_amount_div").style.display = "block";
  } else {
    document.getElementById("sponsor_amount_div").style.display = "none";
  }
});

function initCounter(){
    var eventDate = new Date('2024-07-06T09:00:00');
   var daysElement = document.querySelector("#days");
    if(!daysElement){
        return;
    }
    var hoursElement = document.querySelector("#hours");
    var minutesElement = document.querySelector("#minutes");
    var secondsElement = document.querySelector("#seconds");
    var containerElement = document.querySelector("#counter");
    

    var myCountDown = new ysCountDown(eventDate, function (remaining, finished) {

      if (finished) {
        containerElement.textContent = "Event date has passed";
      }

      daysElement.textContent = remaining.totalDays;
      hoursElement.textContent = remaining.hours;
      minutesElement.textContent = remaining.minutes;
      secondsElement.textContent = remaining.seconds; 
    } );
}

initCounter();

function updateCounter(targetNumber, elementId) {
            const element = document.getElementById(elementId);

           

            // Function to update the counter
            function updateCounterValue(currentCount) {
                // Update the counter element with the new count
                element.textContent = currentCount;

                // Check if we've reached the target number
                if (currentCount < targetNumber) {
                    // If not, call this function again using requestAnimationFrame
                    requestAnimationFrame(() => updateCounterValue(currentCount + 1));
                }
            }

            // Start the counter
            updateCounterValue(0);
        }

fetch("https://forms.adhithi.co.uk/count")
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
    console.log(response);
                    return response.json();
    
                })
                .then(data => {
                    // Update counter element with retrieved value
                    updateCounter(data.adult_count,"adult_counter");
    updateCounter(data.kids_count,"kids_counter");
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    element.textContent = 'Error loading counter';
                });
        }